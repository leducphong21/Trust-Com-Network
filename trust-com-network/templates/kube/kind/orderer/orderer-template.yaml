#
# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ORDERER}}-orderer{{ORDERER_NUM}}-tls-cert
  namespace: ${NS}
spec:
  isCA: false
  privateKey:
    algorithm: ECDSA
    size: 256
  dnsNames:
    - localhost
    - {{ORDERER}}-orderer{{ORDERER_NUM}}
    - {{ORDERER}}-orderer{{ORDERER_NUM}}.${NS}.svc.cluster.local
    - {{ORDERER}}-orderer{{ORDERER_NUM}}.${DOMAIN}
    - {{ORDERER}}-orderer{{ORDERER_NUM}}-admin.${DOMAIN}
  ipAddresses:
    - 127.0.0.1
  secretName: {{ORDERER}}-orderer{{ORDERER_NUM}}-tls-cert
  issuerRef:
    name: {{ORDERER}}-tls-cert-issuer

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ORDERER}}-orderer{{ORDERER_NUM}}-env
data:
  FABRIC_CFG_PATH: /var/hyperledger/fabric/config
  FABRIC_LOGGING_SPEC: INFO # debug:cauthdsl,policies,msp,common.configtx,common.channelconfig=info
  ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0
  ORDERER_GENERAL_LISTENPORT: "6050"
  ORDERER_GENERAL_LOCALMSPID: {{ORDERER}}MSP
  ORDERER_GENERAL_LOCALMSPDIR: /var/hyperledger/fabric/organizations/ordererOrganizations/{{ORDERER}}.example.com/orderers/{{ORDERER}}-orderer{{ORDERER_NUM}}.{{ORDERER}}.example.com/msp
  ORDERER_GENERAL_TLS_ENABLED: "true"
  ORDERER_GENERAL_TLS_CERTIFICATE: /var/hyperledger/fabric/config/tls/tls.crt
  ORDERER_GENERAL_TLS_ROOTCAS: /var/hyperledger/fabric/config/tls/ca.crt
  ORDERER_GENERAL_TLS_PRIVATEKEY: /var/hyperledger/fabric/config/tls/tls.key
  ORDERER_GENERAL_BOOTSTRAPMETHOD: none
  ORDERER_CHANNELPARTICIPATION_ENABLED: "true"
  ORDERER_ADMIN_TLS_ENABLED: "true"
  ORDERER_ADMIN_TLS_CERTIFICATE: /var/hyperledger/fabric/config/tls/tls.crt
  ORDERER_ADMIN_TLS_ROOTCAS: /var/hyperledger/fabric/config/tls/ca.crt
  ORDERER_ADMIN_TLS_PRIVATEKEY: /var/hyperledger/fabric/config/tls/tls.key
  # Authenticate client connections with the org's ecert / admin user enrollments
  ORDERER_ADMIN_TLS_CLIENTROOTCAS: "[/var/hyperledger/fabric/organizations/ordererOrganizations/{{ORDERER}}.example.com/orderers/{{ORDERER}}-orderer{{ORDERER_NUM}}.{{ORDERER}}.example.com/msp/cacerts/{{ORDERER}}-ca.pem]"
  ORDERER_FILELEDGER_LOCATION: /var/hyperledger/fabric/data/orderer{{ORDERER_NUM}}
  ORDERER_CONSENSUS_WALDIR: /var/hyperledger/fabric/data/orderer{{ORDERER_NUM}}/etcdraft/wal
  ORDERER_CONSENSUS_SNAPDIR: /var/hyperledger/fabric/data/orderer{{ORDERER_NUM}}/etcdraft/wal
  ORDERER_OPERATIONS_LISTENADDRESS: 0.0.0.0:8443
  ORDERER_ADMIN_LISTENADDRESS: 0.0.0.0:9443

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ORDERER}}-orderer{{ORDERER_NUM}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ORDERER}}-orderer{{ORDERER_NUM}}
  template:
    metadata:
      labels:
        app: {{ORDERER}}-orderer{{ORDERER_NUM}}
    spec:
      containers:
        - name: main
          image: ${FABRIC_CONTAINER_REGISTRY}/fabric-orderer:${FABRIC_VERSION}
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: {{ORDERER}}-orderer{{ORDERER_NUM}}-env
          ports:
            - containerPort: 6050
            - containerPort: 8443
            - containerPort: 9443
          volumeMounts:
            - name: fabric-volume
              mountPath: /var/hyperledger
            - name: fabric-config
              mountPath: /var/hyperledger/fabric/config
            - name: tls-cert-volume
              mountPath: /var/hyperledger/fabric/config/tls
              readOnly: true
      volumes:
        - name: fabric-volume
          persistentVolumeClaim:
            claimName: fabric-{{ORDERER}}
        - name: fabric-config
          configMap:
            name: {{ORDERER}}-config
        - name: tls-cert-volume
          secret:
            secretName: {{ORDERER}}-orderer{{ORDERER_NUM}}-tls-cert
---
apiVersion: v1
kind: Service
metadata:
  name: {{ORDERER}}-orderer{{ORDERER_NUM}}
spec:
  ports:
    - name: general
      port: 6050
      protocol: TCP
    - name: operations
      port: 8443
      protocol: TCP
    - name: admin
      port: 9443
      protocol: TCP
  selector:
    app: {{ORDERER}}-orderer{{ORDERER_NUM}}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/proxy-connect-timeout: 60s
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
  labels:
    app: {{ORDERER}}-orderer{{ORDERER_NUM}}
  name: {{ORDERER}}-orderer{{ORDERER_NUM}}
spec:
  ingressClassName: nginx
  rules:
    - host: {{ORDERER}}-orderer{{ORDERER_NUM}}.${DOMAIN}
      http:
        paths:
          - backend:
              service:
                name: {{ORDERER}}-orderer{{ORDERER_NUM}}
                port:
                  name: general
            path: /
            pathType: ImplementationSpecific
    - host: {{ORDERER}}-orderer{{ORDERER_NUM}}-admin.${DOMAIN}
      http:
        paths:
          - backend:
              service:
                name: {{ORDERER}}-orderer{{ORDERER_NUM}}
                port:
                  name: admin
            path: /
            pathType: ImplementationSpecific
  tls:
    - hosts:
        - {{ORDERER}}-orderer{{ORDERER_NUM}}.${DOMAIN}
    - hosts:
        - {{ORDERER}}-orderer{{ORDERER_NUM}}-admin.${DOMAIN}
